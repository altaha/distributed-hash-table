/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef WatDHT_H
#define WatDHT_H

#include <TProcessor.h>
#include "WatDHT_types.h"

namespace WatDHT {

class WatDHTIf {
 public:
  virtual ~WatDHTIf() {}
  virtual void get(std::string& _return, const std::string& key) = 0;
  virtual void put(const std::string& key, const std::string& val, const int32_t duration) = 0;
  virtual void join(std::vector<NodeID> & _return, const NodeID& nid) = 0;
  virtual void ping(std::string& _return) = 0;
  virtual void maintain(std::vector<NodeID> & _return, const std::string& id, const NodeID& nid) = 0;
  virtual void migrate_kv(std::map<std::string, std::string> & _return, const std::string& nid) = 0;
  virtual void gossip_neighbors(std::vector<NodeID> & _return, const NodeID& nid, const std::vector<NodeID> & neighbors) = 0;
  virtual void closest_node_cr(NodeID& _return, const std::string& id) = 0;
  virtual void closest_node_ccr(NodeID& _return, const std::string& id) = 0;
};

class WatDHTNull : virtual public WatDHTIf {
 public:
  virtual ~WatDHTNull() {}
  void get(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void put(const std::string& /* key */, const std::string& /* val */, const int32_t /* duration */) {
    return;
  }
  void join(std::vector<NodeID> & /* _return */, const NodeID& /* nid */) {
    return;
  }
  void ping(std::string& /* _return */) {
    return;
  }
  void maintain(std::vector<NodeID> & /* _return */, const std::string& /* id */, const NodeID& /* nid */) {
    return;
  }
  void migrate_kv(std::map<std::string, std::string> & /* _return */, const std::string& /* nid */) {
    return;
  }
  void gossip_neighbors(std::vector<NodeID> & /* _return */, const NodeID& /* nid */, const std::vector<NodeID> & /* neighbors */) {
    return;
  }
  void closest_node_cr(NodeID& /* _return */, const std::string& /* id */) {
    return;
  }
  void closest_node_ccr(NodeID& /* _return */, const std::string& /* id */) {
    return;
  }
};

typedef struct _WatDHT_get_args__isset {
  _WatDHT_get_args__isset() : key(false) {}
  bool key;
} _WatDHT_get_args__isset;

class WatDHT_get_args {
 public:

  WatDHT_get_args() : key("") {
  }

  virtual ~WatDHT_get_args() throw() {}

  std::string key;

  _WatDHT_get_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const WatDHT_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const WatDHT_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_get_pargs {
 public:


  virtual ~WatDHT_get_pargs() throw() {}

  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_get_result__isset {
  _WatDHT_get_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _WatDHT_get_result__isset;

class WatDHT_get_result {
 public:

  WatDHT_get_result() : success("") {
  }

  virtual ~WatDHT_get_result() throw() {}

  std::string success;
  WatDHTException err;

  _WatDHT_get_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  void __set_err(const WatDHTException& val) {
    err = val;
  }

  bool operator == (const WatDHT_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const WatDHT_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_get_presult__isset {
  _WatDHT_get_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _WatDHT_get_presult__isset;

class WatDHT_get_presult {
 public:


  virtual ~WatDHT_get_presult() throw() {}

  std::string* success;
  WatDHTException err;

  _WatDHT_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_put_args__isset {
  _WatDHT_put_args__isset() : key(false), val(false), duration(false) {}
  bool key;
  bool val;
  bool duration;
} _WatDHT_put_args__isset;

class WatDHT_put_args {
 public:

  WatDHT_put_args() : key(""), val(""), duration(0) {
  }

  virtual ~WatDHT_put_args() throw() {}

  std::string key;
  std::string val;
  int32_t duration;

  _WatDHT_put_args__isset __isset;

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_val(const std::string& val) {
    val = val;
  }

  void __set_duration(const int32_t val) {
    duration = val;
  }

  bool operator == (const WatDHT_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(val == rhs.val))
      return false;
    if (!(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const WatDHT_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_put_pargs {
 public:


  virtual ~WatDHT_put_pargs() throw() {}

  const std::string* key;
  const std::string* val;
  const int32_t* duration;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_put_result {
 public:

  WatDHT_put_result() {
  }

  virtual ~WatDHT_put_result() throw() {}


  bool operator == (const WatDHT_put_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WatDHT_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_put_presult {
 public:


  virtual ~WatDHT_put_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_join_args__isset {
  _WatDHT_join_args__isset() : nid(false) {}
  bool nid;
} _WatDHT_join_args__isset;

class WatDHT_join_args {
 public:

  WatDHT_join_args() {
  }

  virtual ~WatDHT_join_args() throw() {}

  NodeID nid;

  _WatDHT_join_args__isset __isset;

  void __set_nid(const NodeID& val) {
    nid = val;
  }

  bool operator == (const WatDHT_join_args & rhs) const
  {
    if (!(nid == rhs.nid))
      return false;
    return true;
  }
  bool operator != (const WatDHT_join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_join_pargs {
 public:


  virtual ~WatDHT_join_pargs() throw() {}

  const NodeID* nid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_join_result__isset {
  _WatDHT_join_result__isset() : success(false) {}
  bool success;
} _WatDHT_join_result__isset;

class WatDHT_join_result {
 public:

  WatDHT_join_result() {
  }

  virtual ~WatDHT_join_result() throw() {}

  std::vector<NodeID>  success;

  _WatDHT_join_result__isset __isset;

  void __set_success(const std::vector<NodeID> & val) {
    success = val;
  }

  bool operator == (const WatDHT_join_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_join_presult__isset {
  _WatDHT_join_presult__isset() : success(false) {}
  bool success;
} _WatDHT_join_presult__isset;

class WatDHT_join_presult {
 public:


  virtual ~WatDHT_join_presult() throw() {}

  std::vector<NodeID> * success;

  _WatDHT_join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class WatDHT_ping_args {
 public:

  WatDHT_ping_args() {
  }

  virtual ~WatDHT_ping_args() throw() {}


  bool operator == (const WatDHT_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const WatDHT_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_ping_pargs {
 public:


  virtual ~WatDHT_ping_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_ping_result__isset {
  _WatDHT_ping_result__isset() : success(false) {}
  bool success;
} _WatDHT_ping_result__isset;

class WatDHT_ping_result {
 public:

  WatDHT_ping_result() : success("") {
  }

  virtual ~WatDHT_ping_result() throw() {}

  std::string success;

  _WatDHT_ping_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const WatDHT_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_ping_presult__isset {
  _WatDHT_ping_presult__isset() : success(false) {}
  bool success;
} _WatDHT_ping_presult__isset;

class WatDHT_ping_presult {
 public:


  virtual ~WatDHT_ping_presult() throw() {}

  std::string* success;

  _WatDHT_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_maintain_args__isset {
  _WatDHT_maintain_args__isset() : id(false), nid(false) {}
  bool id;
  bool nid;
} _WatDHT_maintain_args__isset;

class WatDHT_maintain_args {
 public:

  WatDHT_maintain_args() : id("") {
  }

  virtual ~WatDHT_maintain_args() throw() {}

  std::string id;
  NodeID nid;

  _WatDHT_maintain_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  void __set_nid(const NodeID& val) {
    nid = val;
  }

  bool operator == (const WatDHT_maintain_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(nid == rhs.nid))
      return false;
    return true;
  }
  bool operator != (const WatDHT_maintain_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_maintain_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_maintain_pargs {
 public:


  virtual ~WatDHT_maintain_pargs() throw() {}

  const std::string* id;
  const NodeID* nid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_maintain_result__isset {
  _WatDHT_maintain_result__isset() : success(false) {}
  bool success;
} _WatDHT_maintain_result__isset;

class WatDHT_maintain_result {
 public:

  WatDHT_maintain_result() {
  }

  virtual ~WatDHT_maintain_result() throw() {}

  std::vector<NodeID>  success;

  _WatDHT_maintain_result__isset __isset;

  void __set_success(const std::vector<NodeID> & val) {
    success = val;
  }

  bool operator == (const WatDHT_maintain_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_maintain_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_maintain_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_maintain_presult__isset {
  _WatDHT_maintain_presult__isset() : success(false) {}
  bool success;
} _WatDHT_maintain_presult__isset;

class WatDHT_maintain_presult {
 public:


  virtual ~WatDHT_maintain_presult() throw() {}

  std::vector<NodeID> * success;

  _WatDHT_maintain_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_migrate_kv_args__isset {
  _WatDHT_migrate_kv_args__isset() : nid(false) {}
  bool nid;
} _WatDHT_migrate_kv_args__isset;

class WatDHT_migrate_kv_args {
 public:

  WatDHT_migrate_kv_args() : nid("") {
  }

  virtual ~WatDHT_migrate_kv_args() throw() {}

  std::string nid;

  _WatDHT_migrate_kv_args__isset __isset;

  void __set_nid(const std::string& val) {
    nid = val;
  }

  bool operator == (const WatDHT_migrate_kv_args & rhs) const
  {
    if (!(nid == rhs.nid))
      return false;
    return true;
  }
  bool operator != (const WatDHT_migrate_kv_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_migrate_kv_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_migrate_kv_pargs {
 public:


  virtual ~WatDHT_migrate_kv_pargs() throw() {}

  const std::string* nid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_migrate_kv_result__isset {
  _WatDHT_migrate_kv_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _WatDHT_migrate_kv_result__isset;

class WatDHT_migrate_kv_result {
 public:

  WatDHT_migrate_kv_result() {
  }

  virtual ~WatDHT_migrate_kv_result() throw() {}

  std::map<std::string, std::string>  success;
  WatDHTException err;

  _WatDHT_migrate_kv_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_err(const WatDHTException& val) {
    err = val;
  }

  bool operator == (const WatDHT_migrate_kv_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const WatDHT_migrate_kv_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_migrate_kv_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_migrate_kv_presult__isset {
  _WatDHT_migrate_kv_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _WatDHT_migrate_kv_presult__isset;

class WatDHT_migrate_kv_presult {
 public:


  virtual ~WatDHT_migrate_kv_presult() throw() {}

  std::map<std::string, std::string> * success;
  WatDHTException err;

  _WatDHT_migrate_kv_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_gossip_neighbors_args__isset {
  _WatDHT_gossip_neighbors_args__isset() : nid(false), neighbors(false) {}
  bool nid;
  bool neighbors;
} _WatDHT_gossip_neighbors_args__isset;

class WatDHT_gossip_neighbors_args {
 public:

  WatDHT_gossip_neighbors_args() {
  }

  virtual ~WatDHT_gossip_neighbors_args() throw() {}

  NodeID nid;
  std::vector<NodeID>  neighbors;

  _WatDHT_gossip_neighbors_args__isset __isset;

  void __set_nid(const NodeID& val) {
    nid = val;
  }

  void __set_neighbors(const std::vector<NodeID> & val) {
    neighbors = val;
  }

  bool operator == (const WatDHT_gossip_neighbors_args & rhs) const
  {
    if (!(nid == rhs.nid))
      return false;
    if (!(neighbors == rhs.neighbors))
      return false;
    return true;
  }
  bool operator != (const WatDHT_gossip_neighbors_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_gossip_neighbors_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_gossip_neighbors_pargs {
 public:


  virtual ~WatDHT_gossip_neighbors_pargs() throw() {}

  const NodeID* nid;
  const std::vector<NodeID> * neighbors;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_gossip_neighbors_result__isset {
  _WatDHT_gossip_neighbors_result__isset() : success(false) {}
  bool success;
} _WatDHT_gossip_neighbors_result__isset;

class WatDHT_gossip_neighbors_result {
 public:

  WatDHT_gossip_neighbors_result() {
  }

  virtual ~WatDHT_gossip_neighbors_result() throw() {}

  std::vector<NodeID>  success;

  _WatDHT_gossip_neighbors_result__isset __isset;

  void __set_success(const std::vector<NodeID> & val) {
    success = val;
  }

  bool operator == (const WatDHT_gossip_neighbors_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_gossip_neighbors_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_gossip_neighbors_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_gossip_neighbors_presult__isset {
  _WatDHT_gossip_neighbors_presult__isset() : success(false) {}
  bool success;
} _WatDHT_gossip_neighbors_presult__isset;

class WatDHT_gossip_neighbors_presult {
 public:


  virtual ~WatDHT_gossip_neighbors_presult() throw() {}

  std::vector<NodeID> * success;

  _WatDHT_gossip_neighbors_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_closest_node_cr_args__isset {
  _WatDHT_closest_node_cr_args__isset() : id(false) {}
  bool id;
} _WatDHT_closest_node_cr_args__isset;

class WatDHT_closest_node_cr_args {
 public:

  WatDHT_closest_node_cr_args() : id("") {
  }

  virtual ~WatDHT_closest_node_cr_args() throw() {}

  std::string id;

  _WatDHT_closest_node_cr_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  bool operator == (const WatDHT_closest_node_cr_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const WatDHT_closest_node_cr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_closest_node_cr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_closest_node_cr_pargs {
 public:


  virtual ~WatDHT_closest_node_cr_pargs() throw() {}

  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_closest_node_cr_result__isset {
  _WatDHT_closest_node_cr_result__isset() : success(false) {}
  bool success;
} _WatDHT_closest_node_cr_result__isset;

class WatDHT_closest_node_cr_result {
 public:

  WatDHT_closest_node_cr_result() {
  }

  virtual ~WatDHT_closest_node_cr_result() throw() {}

  NodeID success;

  _WatDHT_closest_node_cr_result__isset __isset;

  void __set_success(const NodeID& val) {
    success = val;
  }

  bool operator == (const WatDHT_closest_node_cr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_closest_node_cr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_closest_node_cr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_closest_node_cr_presult__isset {
  _WatDHT_closest_node_cr_presult__isset() : success(false) {}
  bool success;
} _WatDHT_closest_node_cr_presult__isset;

class WatDHT_closest_node_cr_presult {
 public:


  virtual ~WatDHT_closest_node_cr_presult() throw() {}

  NodeID* success;

  _WatDHT_closest_node_cr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _WatDHT_closest_node_ccr_args__isset {
  _WatDHT_closest_node_ccr_args__isset() : id(false) {}
  bool id;
} _WatDHT_closest_node_ccr_args__isset;

class WatDHT_closest_node_ccr_args {
 public:

  WatDHT_closest_node_ccr_args() : id("") {
  }

  virtual ~WatDHT_closest_node_ccr_args() throw() {}

  std::string id;

  _WatDHT_closest_node_ccr_args__isset __isset;

  void __set_id(const std::string& val) {
    id = val;
  }

  bool operator == (const WatDHT_closest_node_ccr_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const WatDHT_closest_node_ccr_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_closest_node_ccr_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class WatDHT_closest_node_ccr_pargs {
 public:


  virtual ~WatDHT_closest_node_ccr_pargs() throw() {}

  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_closest_node_ccr_result__isset {
  _WatDHT_closest_node_ccr_result__isset() : success(false) {}
  bool success;
} _WatDHT_closest_node_ccr_result__isset;

class WatDHT_closest_node_ccr_result {
 public:

  WatDHT_closest_node_ccr_result() {
  }

  virtual ~WatDHT_closest_node_ccr_result() throw() {}

  NodeID success;

  _WatDHT_closest_node_ccr_result__isset __isset;

  void __set_success(const NodeID& val) {
    success = val;
  }

  bool operator == (const WatDHT_closest_node_ccr_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const WatDHT_closest_node_ccr_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WatDHT_closest_node_ccr_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _WatDHT_closest_node_ccr_presult__isset {
  _WatDHT_closest_node_ccr_presult__isset() : success(false) {}
  bool success;
} _WatDHT_closest_node_ccr_presult__isset;

class WatDHT_closest_node_ccr_presult {
 public:


  virtual ~WatDHT_closest_node_ccr_presult() throw() {}

  NodeID* success;

  _WatDHT_closest_node_ccr_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class WatDHTClient : virtual public WatDHTIf {
 public:
  WatDHTClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  WatDHTClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get(std::string& _return, const std::string& key);
  void send_get(const std::string& key);
  void recv_get(std::string& _return);
  void put(const std::string& key, const std::string& val, const int32_t duration);
  void send_put(const std::string& key, const std::string& val, const int32_t duration);
  void recv_put();
  void join(std::vector<NodeID> & _return, const NodeID& nid);
  void send_join(const NodeID& nid);
  void recv_join(std::vector<NodeID> & _return);
  void ping(std::string& _return);
  void send_ping();
  void recv_ping(std::string& _return);
  void maintain(std::vector<NodeID> & _return, const std::string& id, const NodeID& nid);
  void send_maintain(const std::string& id, const NodeID& nid);
  void recv_maintain(std::vector<NodeID> & _return);
  void migrate_kv(std::map<std::string, std::string> & _return, const std::string& nid);
  void send_migrate_kv(const std::string& nid);
  void recv_migrate_kv(std::map<std::string, std::string> & _return);
  void gossip_neighbors(std::vector<NodeID> & _return, const NodeID& nid, const std::vector<NodeID> & neighbors);
  void send_gossip_neighbors(const NodeID& nid, const std::vector<NodeID> & neighbors);
  void recv_gossip_neighbors(std::vector<NodeID> & _return);
  void closest_node_cr(NodeID& _return, const std::string& id);
  void send_closest_node_cr(const std::string& id);
  void recv_closest_node_cr(NodeID& _return);
  void closest_node_ccr(NodeID& _return, const std::string& id);
  void send_closest_node_ccr(const std::string& id);
  void recv_closest_node_ccr(NodeID& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class WatDHTProcessor : virtual public ::apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<WatDHTIf> iface_;
  virtual bool process_fn(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid, void* callContext);
 private:
  std::map<std::string, void (WatDHTProcessor::*)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*)> processMap_;
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_maintain(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_migrate_kv(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_gossip_neighbors(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closest_node_cr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_closest_node_ccr(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  WatDHTProcessor(boost::shared_ptr<WatDHTIf> iface) :
    iface_(iface) {
    processMap_["get"] = &WatDHTProcessor::process_get;
    processMap_["put"] = &WatDHTProcessor::process_put;
    processMap_["join"] = &WatDHTProcessor::process_join;
    processMap_["ping"] = &WatDHTProcessor::process_ping;
    processMap_["maintain"] = &WatDHTProcessor::process_maintain;
    processMap_["migrate_kv"] = &WatDHTProcessor::process_migrate_kv;
    processMap_["gossip_neighbors"] = &WatDHTProcessor::process_gossip_neighbors;
    processMap_["closest_node_cr"] = &WatDHTProcessor::process_closest_node_cr;
    processMap_["closest_node_ccr"] = &WatDHTProcessor::process_closest_node_ccr;
  }

  virtual bool process(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot, void* callContext);
  virtual ~WatDHTProcessor() {}
};

class WatDHTMultiface : virtual public WatDHTIf {
 public:
  WatDHTMultiface(std::vector<boost::shared_ptr<WatDHTIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~WatDHTMultiface() {}
 protected:
  std::vector<boost::shared_ptr<WatDHTIf> > ifaces_;
  WatDHTMultiface() {}
  void add(boost::shared_ptr<WatDHTIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->get(_return, key);
        return;
      } else {
        ifaces_[i]->get(_return, key);
      }
    }
  }

  void put(const std::string& key, const std::string& val, const int32_t duration) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->put(key, val, duration);
    }
  }

  void join(std::vector<NodeID> & _return, const NodeID& nid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->join(_return, nid);
        return;
      } else {
        ifaces_[i]->join(_return, nid);
      }
    }
  }

  void ping(std::string& _return) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ping(_return);
        return;
      } else {
        ifaces_[i]->ping(_return);
      }
    }
  }

  void maintain(std::vector<NodeID> & _return, const std::string& id, const NodeID& nid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->maintain(_return, id, nid);
        return;
      } else {
        ifaces_[i]->maintain(_return, id, nid);
      }
    }
  }

  void migrate_kv(std::map<std::string, std::string> & _return, const std::string& nid) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->migrate_kv(_return, nid);
        return;
      } else {
        ifaces_[i]->migrate_kv(_return, nid);
      }
    }
  }

  void gossip_neighbors(std::vector<NodeID> & _return, const NodeID& nid, const std::vector<NodeID> & neighbors) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->gossip_neighbors(_return, nid, neighbors);
        return;
      } else {
        ifaces_[i]->gossip_neighbors(_return, nid, neighbors);
      }
    }
  }

  void closest_node_cr(NodeID& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->closest_node_cr(_return, id);
        return;
      } else {
        ifaces_[i]->closest_node_cr(_return, id);
      }
    }
  }

  void closest_node_ccr(NodeID& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->closest_node_ccr(_return, id);
        return;
      } else {
        ifaces_[i]->closest_node_ccr(_return, id);
      }
    }
  }

};

} // namespace

#endif
